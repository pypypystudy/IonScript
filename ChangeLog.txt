* Change log
	* 0.17
		* License changed to a clearer zlib/png.
		* Namespace changed from ion::script to ionscript.
		* Lexer rewritten.
		
	* 0.16.1
		* When you want to run some already prepared bytecode you have to pass a
    pointer to your first byte (char*) to the run() method. Bytecode also
    has a header composed by a magic number to check whether it's a real
    bytecode (and not just a bunch of random bytes), a version number, so
    that a bytecode can be run only on VirtualMachines with equal or higher
    version and the whole bytecode size.
		* Folder renaming to IonScript.
		* Sample IonScript integration application.
		* A bunch of new handy methods for retrieving typed values from Values safely so that the type is first checked before returning it and an exception is raised if type mismatches. You can avoid now using the assert*() functions in FunctionCallMethod and use these safe methods for a cleaner, lighter and faster code. A new class called Managed<> has been introduced for managing custom C++ classes that do not implement the IManageableObject interface.
		* VirtualMachine now has a state and a goOn() method to continue execution after it is paused. The example now uses the safe value getters for less and more readable code.
		* Bug fixes.
		
	* 0.15.1
		* You can call script-functions from within your C++ application by the VirtualMachine::callScriptFunction() method.
		* error() builtin function supported. It throws a runtime error message.
		* Major bug fixes.
		
	* 0.14
		* Arguments are not copied to a temporary buffer anymore. They are pushed onto the value-stack so no additional copy is required.
		* store.x ops replaced by push.x ops.
		* Built-in functions str() and join() added.
		* Strings can be defined with the syntax "^symbol" where symbol is a string containing identifier-like only characters.
		* You can define dictionaries in multiple lines now.
		* Internal rewritings/polishment.

	* 0.13
		* assertArgumentsCount() removed. Now you can define the number of accepted arguments when registering an new function so every function call is checked at compile time.
		* "continue" and "break" statements usable within loops.
		* compilation errors correctly provide the line number where the error is found.
		* if you create a new variable within a for or while condition/assignment expression, these variables are local to the loops now and are deleted after the loop is executed.
		* major internal improvements, restructuring and polishing.
		
	* 0.12
		* Better script test utility. It runs all scripts contained in the scripts folder.
		* Lexer def keyword bug fix.
		* Some polishment
		* assert() and dump() functions. assert() takes one or two arguments. The former one is the expression that will be tested and must be true. The latter one is a string that will be printed if assertion fails. dump() prints the current VM state debug information.
		
	* 0.11
		* Documentation added. Some polishing.
