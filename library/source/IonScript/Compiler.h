/*******************************************************************************
 * IonScript                                                                   *
 * (c) 2010-2011 Canio Massimo Tristano <massimo.tristano@gmail.com>           *
 *                                                                             *
 * This software is provided 'as-is', without any express or implied           *
 * warranty. In no event will the authors be held liable for any damages       *
 * arising from the use of this software.                                      *
 *                                                                             *
 * Permission is granted to anyone to use this software for any purpose,       *
 * including commercial applications, and to alter it and redistribute it      *
 * freely, subject to the following restrictions:                              *
 *                                                                             *
 * 1. The origin of this software must not be misrepresented; you must not     *
 * claim that you wrote the original software. If you use this software        *
 * in a product, an acknowledgment in the product documentation would be       *
 * appreciated but is not required.                                            *
 *                                                                             *
 * 2. Altered source versions must be plainly marked as such, and must not be  *
 * misrepresented as being the original software.                              *
 *                                                                             *
 * 3. This notice may not be removed or altered from any source                *
 * distribution.                                                               *
 ******************************************************************************/

#ifndef ION_SCRIPT_COMPILER_H
#define	ION_SCRIPT_COMPILER_H

#include "Exceptions.h"
#include "Typedefs.h"
#include "OpCode.h"

#include <exception>
#include <iostream>
#include <vector>
#include <stack>
#include <map>

namespace ionscript {

   /**
    * Compiles the input syntax tree into executable bytecode.
    * @param hostFunctionsMap the map that contains the callable host functions.
    */
   class Compiler {
   public:
      /**
       * Constructs a new compiler specifing the callable host functions with the given HostFunctionMap.
       * @param hostFunctionsMap the map that contains the callable host functions.
       */
      Compiler(const HostFunctionsMap& hostFunctionsMap);

      /**
       * Compiles target SyntaxTree into an executable bytecode.
       * @param tree input syntax tree generated by the Parser.
       * @param output output bytecode.
       */
      void compile(const SyntaxTree& tree, BytecodeWriter& output);

   private:

      std::vector<std::string> mNamesStack;

      std::map<std::string, location_t> mScriptFunctionsLocations;
      const HostFunctionsMap& mHostFunctionsMap;

      /* STATE */
      std::stack<size_t> mActivationFramePointer;
      std::stack<small_size_t> mnRequiredRegisters;
      std::stack<small_size_t> mnBlockValueStackSize;
      std::stack<small_size_t> mnLoopValueStackSize;
      std::stack<bool> mDeclareOnly;
      std::stack<bool> mVariableDeclarationAllowed;
      std::stack<std::vector<index_t>* > mContinues;
      std::stack<std::vector<index_t>* > mBreaks;

      int compile(const SyntaxTree& tree, BytecodeWriter& output, location_t target);
      void compileExpressionNodeChildren(const SyntaxTree& node, BytecodeWriter& output, location_t target, OpCode op);

      bool findLocalName(const std::string& name, location_t& outLocation) const;
      void deleteValues(size_t stackSize, BytecodeWriter& output, bool deleteNames);

      /* Auxiliary control functions*/
      void checkComparisonConsistency(const SyntaxTree& tree) const;

      void error(size_t line, const std::string& error) const;

   };
}
#endif	/* ION_SCRIPT_COMPILER_H */


